// saving the current progress and going on another path.

package befaster.solutions.CHK;

import befaster.runner.SolutionNotImplementedException;

public class CheckoutSolution {
    public Integer checkout(String skus) {
        int[] productsNumber = new int[26];
        int sum = 0;
        for (char sku:skus.toCharArray()) {
            int ascii = (int) sku;
            ascii = ascii-65;
            if (ascii<0 || ascii >=26)
                return -1;
            productsNumber[ascii]++;
        }
        // adding the prices for the A product
        // and removing the producs from the array
        if (productsNumber[0]>=5) {
            sum += (productsNumber[0]/5)*200;
            int removedProducts = productsNumber[0]/5;
            productsNumber[0] = productsNumber[0] - removedProducts*5;
        }
        if (productsNumber[0]>=3) {
            sum += (productsNumber[0]/3)*130;
            int removedProducts = productsNumber[0]/3;
            productsNumber[0] = productsNumber[0] - removedProducts*3;
        }
        sum+= 50 * productsNumber[0];

        // adding the prices for the E product because we need to process them
        // before the B product as 2Es will remove one B (or at least that's
        // what i'm understanding from the info provided)
        if (productsNumber[4]>=2){
            int pairs_of_e_prod=productsNumber[4] /2;
            productsNumber[1] =productsNumber[1] - pairs_of_e_prod;
            if(productsNumber[1]<0)productsNumber[1]=0;
        }
        sum+= 40 * productsNumber[4];

        // adding the prices for the B product
        sum += (productsNumber[1]/2)*45 +(productsNumber[1]%2)*30;

        // C/D product
        sum += 20 * productsNumber[2];
        sum += 15 * productsNumber[3];

        // F Product
        if (productsNumber[5]>=3){
            int triples_of_e_prod=productsNumber[5] /3;
            productsNumber[5] = productsNumber[5] - triples_of_e_prod*3;
            sum+= 20*triples_of_e_prod;
        }
        sum+=10*productsNumber[5];
        // G Product
        sum+=20*productsNumber[6];
        // H Product
        if (productsNumber[7]>=10) {
            sum += (productsNumber[7]/10)*80;
            int removedProducts = productsNumber[7]/10;
            productsNumber[7] = productsNumber[7] - removedProducts*10;
        }
        if (productsNumber[7]>=5) {
            sum += (productsNumber[7]/5)*45;
            int removedProducts = productsNumber[7]/5;
            productsNumber[7] = productsNumber[7] - removedProducts*5;
        }
        sum+= 100 * productsNumber[7];
        //I&J
        sum+=35*productsNumber[8];//I
        sum+=60*productsNumber[9];//J
        //K
        if (productsNumber[10]>=2) {
            sum += (productsNumber[10]/2)*150;
            int removedProducts = productsNumber[10]/2;
            productsNumber[10] = productsNumber[10] - removedProducts*2;
        }
        sum+= 80 * productsNumber[10];
        //L
        sum+=90*productsNumber[11];//L

        return sum;
    }
}
